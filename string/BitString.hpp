/*
 В заданиии требуется создать базовый класс (как вариант, абстрактный базовый класс) и определить общие методы show ( ), get ( ), set ( ) и другие, специфические для данного класса. Создать производные классы, в которых добавить специфические свойства и методы.
 
 Часть методов переопределить. Создать массив объектов (указателей на объекты) базового класса и заполнить объектами (указателями на объекты) производных классов. Объекты производных классов идентифицировать конструктором по имени или идентификационному номеру.
 
 Вызвать метод show ( ) базового класса и просмотреть массив объектов.
 
 Использовать объекты производных классов для моделирования реальных ситуаций и объектов.
 
 Задание является продолжением "Полиморфизм 7"
 Описать класс «Битовая строка» производный от класса «Строка»
 (строки данного класса могут содержать только символы ‘0’ и ‘1’). Если в основе инициализирующей строки встретятся любые символы, отличные от допустимых, то «Битовая строка» становится пустой. Содержимое строки рассматривается как двоичное представление целого числа со знаковым разрядом. Отрицательные числа хранятся в дополнительном коде.
 
 Методы:
 1) конструктор без параметров;
 2) конструктор, принимающий в качестве параметра C-строку;
 3) конструктор копирования;
 4) оператор присваивания;
 4) деструктор;
 5) изменение знака числа (перевод числа в дополнительный код).
 8) сложение битовых строк (перегрузить операторы + и +=);
 9) проверка на равенство (= =) и на неравенство (!=).
 */
#ifndef BitString_hpp
#define BitString_hpp
#include <stdio.h>
class BitString
{
private:
    char* str;
    char znak;
public:
    /*
     Методы:
     1) конструктор без параметров;+
     2) конструктор, принимающий в качестве параметра C-строку;+
     3) конструктор копирования;+
     4) оператор присваивания;+
     4) деструктор;+
     5) изменение знака числа (перевод числа в дополнительный код).
     8) сложение битовых строк (перегрузить операторы + и +=);
     9) проверка на равенство (= =) и на неравенство (!=).
     */
    BitString();
    BitString(char* temp,char _znak);
    BitString(const BitString& obj); // Конструктор копирования
    ~BitString();
    BitString& operator=(const BitString& obj);
    char * Get();
    void Set(char* temp);
    void Show();
    //    char *  MagicSting (BitString& obj)
    //    {
    //
    //        for (int i=0;strlen(obj.str);++i)
    //        {
    //
    //        }
    //    }
    BitString& operator +(const BitString&obj);
    BitString& operator+=(const BitString&obj);
    bool operator==(const BitString&obj);
    bool operator!=(const BitString&obj);
};

#endif /* BitString_hpp */
